[{"/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/index.js":"1","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/App.js":"2","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Home/Home.jsx":"3","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Navbar/Navbar.jsx":"4","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Play/Play.jsx":"5","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Game/Game.jsx":"6","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/ButtonedInputBox/ButtonedInputBox.jsx":"7","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Login/Login.jsx":"8","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Lobby/Lobby.jsx":"9"},{"size":219,"mtime":1637209560169,"results":"10","hashOfConfig":"11"},{"size":1641,"mtime":1638809089972,"results":"12","hashOfConfig":"11"},{"size":4132,"mtime":1637148020818,"results":"13","hashOfConfig":"11"},{"size":2511,"mtime":1638041726229,"results":"14","hashOfConfig":"11"},{"size":7154,"mtime":1640898011789,"results":"15","hashOfConfig":"11"},{"size":9635,"mtime":1640981454325,"results":"16","hashOfConfig":"11"},{"size":1091,"mtime":1638041179792,"results":"17","hashOfConfig":"11"},{"size":3267,"mtime":1640871090164,"results":"18","hashOfConfig":"11"},{"size":11138,"mtime":1640982017593,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"farzu1",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/index.js",[],["44","45"],"/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/App.js",["46"],"import {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport socketClient from 'socket.io-client';\nimport Game from \"./Components/Game/Game\";\n\nimport Home from './Components/Home/Home';\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Play from \"./Components/Play/Play\";\nimport Lobby from \"./Components/Lobby/Lobby\";\n\nimport { createContext, useMemo, useState } from \"react\";\nimport { initializeApp } from 'firebase/app';\nimport Login from \"./Components/Login/Login\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCM_vXZ-ZgeHMQ_rqjCRGwMc516purIik8\",\n  authDomain: \"multicoder-900aa.firebaseapp.com\",\n  projectId: \"multicoder-900aa\",\n  storageBucket: \"multicoder-900aa.appspot.com\",\n  messagingSenderId: \"865496587457\",\n  appId: \"1:865496587457:web:41e916c0910a83bc278840\",\n  measurementId: \"G-937Z5NFW9W\"\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const User = createContext();\n\nconst socket = socketClient('http://127.0.0.1:8080');\nfunction App() {\n  const [user, setUser] = useState({});\n  const value = useMemo(\n    () => ({user, setUser}),\n    [user]\n  );\n  return (\n    <User.Provider value={value}>\n      <Router>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/play\" element={<Play socket={socket}/>} />\n          <Route path=\"/game\" element={<Game socket={socket}/>} />\n          <Route path=\"/login\" element={<Login socket={socket} />} />\n          <Route path=\"/lobby\" element={<Lobby socket={socket} />} />\n          {/* <Redirect to=\"/\" /> */}\n        </Routes>\n      </Router>\n    </User.Provider>\n  );\n}\n\nexport default App;\n","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Home/Home.jsx",[],"/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Navbar/Navbar.jsx",[],"/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Play/Play.jsx",["47"],"import './Play.css';\nimport createRoom from '../../assets/createRoom.svg';\nimport joinRoom from '../../assets/joinRoom.svg';\nimport friendsFamily from '../../assets/friends&family.png';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useContext, useState, useEffect } from 'react';\nimport { User } from '../../App';\n\nexport default function Play(props) {\n    const {user, setUser} = useContext(User);\n    const socket = props.socket;\n    const navigate = useNavigate();\n    const [joinCode, setJoinCode] = useState('');\n    const { state } = useLocation();\n\n    console.log(user);\n    const initFriendsAndFamilyGame = () => {\n        socket.emit('initFriendsAndFamilyGame', null);\n        socket.on('friendsAndFamilyGameCreated', (data) => {\n            setUser({\n                name: user.name,\n                email: user.email,\n                photo: user.photo,\n                admin: true,\n            });\n            navigate(\"/lobby\", { state: { gameCode: data[0], playersObj: JSON.parse(data[1]) } } );\n        });\n    }\n\n    const showCreateRoom = () => {\n        const joinWays = document.querySelector('.playJoinWays');\n        const createRoomContainer = document.querySelector('.createARoom');\n        joinWays.classList.add('fadeOut');\n        setTimeout(() => {\n            joinWays.classList.remove('fadeOut');\n            joinWays.style.display = 'none';\n            createRoomContainer.classList.add('fadeIn');\n            createRoomContainer.style.display = 'block';\n            setTimeout(() => {\n                createRoomContainer.classList.remove('fadeIn');\n            }, 400);\n        }, 400);\n    }\n\n    const showJoinRoom = () => {\n        const joinWays = document.querySelector('.playJoinWays');\n        const joinRoomContainer = document.querySelector('.joinARoomContainer');\n        joinWays.classList.add('fadeOut');\n        setTimeout(() => {\n            joinWays.classList.remove('fadeOut');\n            joinWays.style.display = 'none';\n            joinRoomContainer.classList.add('fadeIn');\n            joinRoomContainer.style.display = 'block';\n            setTimeout(() => {\n                joinRoomContainer.classList.remove('fadeIn');\n            }, 400);\n        }, 400);\n    }\n\n    const hideCreateARoom = () => {\n        const joinWays = document.querySelector('.playJoinWays');\n        const createRoomContainer = document.querySelector('.createARoom');\n        createRoomContainer.classList.add('fadeOut');\n        setTimeout(() => {\n            createRoomContainer.classList.remove('fadeOut');\n            createRoomContainer.style.display = 'none';\n            joinWays.classList.add('fadeIn');\n            joinWays.style.display = 'flex';\n            setTimeout(() => {\n                joinWays.classList.remove('fadeIn');\n            }, 400);\n        }, 400);\n    }\n\n    const hideJoinARoom = () => {\n        const joinWays = document.querySelector('.playJoinWays');\n        const joinRoomContainer = document.querySelector('.joinARoomContainer');\n        joinRoomContainer.classList.add('fadeOut');\n        setTimeout(() => {\n            joinRoomContainer.classList.remove('fadeOut');\n            joinRoomContainer.style.display = 'none';\n            joinWays.classList.add('fadeIn');\n            joinWays.style.display = 'flex';\n            setTimeout(() => {\n                joinWays.classList.remove('fadeIn');\n            }, 400);\n        }, 400);\n    }\n\n    const joinARoom = () => {\n        socket.emit('joinARoom', [joinCode, user.email]);\n        socket.on('joinARoom', (data) => {\n            if (data[0]) {\n                navigate(\"/lobby\", { state: { gameCode: joinCode, playersObj: JSON.parse(data[1]) } } );\n            } else {\n                // Write an error handler\n                console.log('Error joining: No room with this code exists');\n                if (data[1] === 'NoRoom') {\n                    showWarning('Error joining: No room with this code exists.');\n                } else if (data[1] === 'Kicked') {\n                    showWarning('Sorry, but you\\'ve already been kicked from this room');\n                }\n            }\n        })\n    }\n\n    const showWarning = (msg) => {\n        const warningContainer = document.getElementById('playWarning');\n        warningContainer.innerText = msg;\n        warningContainer.classList.add('fadeIn');\n        warningContainer.style.display = 'block';\n        setTimeout(() => {\n            warningContainer.classList.remove('fadeIn');\n            setTimeout(() => {\n                warningContainer.classList.add('fadeOut');\n                setTimeout(() => {\n                    warningContainer.style.display = 'none';\n                    warningContainer.classList.remove('fadeOut');\n                    warningContainer.innerHTML = '';\n                }, 400);\n            }, 5000);\n        }, 400);\n    }\n\n    useEffect(() => {\n        if (state) {\n            if (state.kicked) {\n                showWarning(\"Sorry, but the room's leader kicked you out...\");\n            }\n        }\n    }, [])\n\n    return (\n        <div className=\"play\">\n            <h1>Welcome to the Arena</h1>\n            <p className=\"greyish\">Choose your way of joining</p>\n            <div className=\"warning\" id=\"playWarning\"></div>\n            <div className=\"playJoinWays\">\n                <div className=\"joinWay\" onClick={showCreateRoom}>\n                    <img src={createRoom} alt=\"\" />\n                    <h3>Create a Room</h3>\n                    <p className=\"greyish\">\n                        Be the boss, choose the game mode, and\n                        orginaze the whole thing\n                    </p>\n                </div>\n                <div className=\"joinWay\" onClick={showJoinRoom}>\n                    <img src={joinRoom} alt=\"\" />\n                    <h3>Join a Room</h3>\n                    <p className=\"greyish\">\n                        let the boring stuff to the boring people,\n                        copy, paste, and let’s goo! \n                    </p>\n                </div>\n            </div>\n            <div className=\"createARoom\">\n                <div className=\"gameMode\" onClick={initFriendsAndFamilyGame}>\n                    <img src={friendsFamily} alt=\"\" />\n                    <div>\n                        <h3>Friends & Family</h3>\n                        <p className=\"greyish\">As Many As You  Like! (20 Tops)</p>\n                    </div>\n                </div>\n                <button className=\"flatBtn\" onClick={hideCreateARoom}>Back</button>\n            </div>\n            <div className=\"joinARoomContainer\">\n                <div className=\"joinARoom\">\n                    <button className=\"closeJoinARoom\" onClick={hideJoinARoom}><i class=\"fas fa-times\"></i></button>\n                    <h3>Enter the room's code:</h3>\n                    <div className=\"inputBox\">\n                        <input type=\"text\" placeholder=\"XXXXX-XXXXX-XXXXX\" onChange={(e) => setJoinCode(e.target.value)}/>\n                    </div>\n                    <button className=\"flatBtn\" onClick={joinARoom}>Join</button>\n                </div>\n            </div>\n        </div>\n    )\n}","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Game/Game.jsx",["48","49","50","51"],"import './Game.css';\nimport { useLocation, useNavigate } from 'react-router';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"ace-builds/src-noconflict/theme-twilight\";\nimport \"ace-builds/src-noconflict/ext-language_tools\"\n\nimport ButtonedInputBox from '../ButtonedInputBox/ButtonedInputBox';\nimport { User } from '../../App';\n\n\nexport default function Game(props) {\n    const socket = props.socket;\n    const { state } = useLocation();\n    const [activeTab, setActiveTab] = useState('question');\n    const [messages, setMessages] = useState([]);\n    const [question, setQuestion] = useState({});\n    const [timerId, setTimerId] = useState();\n    const { user, setUser } = useContext(User);\n    const timerRef = useRef(0);\n    const navigate = useNavigate();\n\n    let solution = '';\n\n    console.log(user);\n\n    useEffect(() => {\n        setQuestion(JSON.parse(state.question));\n\n        setTimerId(setInterval(() => {\n            timerRef.current++;\n            document.querySelector('.timerContainer').innerHTML = timerRef.current;\n        }, 1000));\n\n        socket.on('globalMessage', (data) => {\n            setMessages(messages => [...messages, data]);\n        });\n\n        socket.on('friendsAndFamilyWinnerNotify', (data) => {\n            //data[0]: name\n            //data[1]: time\n            //data[2]: newPlayersObject (string)\n            showNotificationSection(`<b>${data[0]}</b> has Won! his timescore is ${data[1]}`, '#528a08');\n        });\n\n        socket.on('youWonFriendsAndFamily', (data) => {\n            //data: newPlayersObject (string)\n            console.log(`You Won! Congrats, here, update yourself ${data}`);\n            navigate('/lobby', { state: { gameCode: state.gameCode, playersObj: JSON.parse(data) } });\n        });\n\n        socket.on('friendsAndFamilyLoserNotify', (data) => {\n            //data: name\n            showNotificationSection(`<b>${data}</b> submitted a broken code, what a loser`, '#9A1C0C');\n        });\n\n        socket.on('youLostFriendsAndFamily', () => {\n            console.log('you lost...');\n        });\n\n        socket.on('newAdmin', () => {\n            setUser({\n                name: user.displayName,\n                email: user.email,\n                photo: user.photoURL,\n                admin: true,\n            });\n        });\n\n        return () => {\n            socket.off('globalMessage');\n            socket.off('friendsAndFamilyWinnerNotify');\n            socket.off('youWonFriendsAndFamily');\n            socket.off('friendsAndFamilyLoserNotify');\n            socket.off('youLostFriendsAndFamily');\n            socket.off('newAdmin');\n        }\n    }, []);\n    console.log(question);\n\n    const updateTabState = (newTab) => {\n        document.querySelector('.tabBarItem-active').classList.remove('tabBarItem-active');\n        document.getElementById(`${newTab}Tab`).classList.add('tabBarItem-active');\n        setActiveTab(newTab);\n    }\n\n    const changeHandler = event => {\n        solution = event;\n    }\n\n    const arrayComparison = (a, b) => {\n        return Array.isArray(a) &&\n        Array.isArray(b) &&\n        a.length === b.length &&\n        a.every((val, index) => val === b[index]);\n    }\n\n    const submitCode = () => {\n        let result = true;\n        question.testCases.forEach(val => {\n            let test = solution + `\\nsortArr([${val.input}]);`;\n            //This eval call must change, preferable with an RCM\n            let answer = eval(test);\n            if (question.dataType == \"Array\") {\n                if (!arrayComparison(answer, val.expectedOutput)) {\n                    result = false;\n                }\n            }\n        });\n        if (result) {\n            //Right Answer\n            clearInterval(timerId);\n            console.log(timerRef.current);\n            socket.emit('friendsAndFamilyWinner', [timerRef.current, state.gameCode]);\n        } else {\n            //Wrong Answer\n            socket.emit('friendsAndFamilyLoser', state.gameCode);\n        }\n    }\n\n    const showNotificationSection = (msg, color) => {\n        const notificationSection = document.getElementById('gamePageNotificationContainer');\n        notificationSection.innerHTML = msg;\n        notificationSection.style.backgroundColor = color;\n        notificationSection.classList.add('fadeIn');\n        notificationSection.style.opacity = '1';\n        setTimeout(() => {\n            notificationSection.classList.remove('fadeIn');\n            notificationSection.classList.add('fadeOut');\n            setTimeout(() => {\n                notificationSection.style.opacity = '0';\n                notificationSection.classList.remove('fadeOut');\n            }, 400);\n        }, 8000);\n    }\n\n    console.log(solution);\n\n    return (\n        <div className=\"game\">\n            <div className=\"gameTopSection\">\n                <div className=\"roomCodeContainer\"><b>Room Code:</b> {state.gameCode}</div>\n                <div className=\"gameTopSectionRightSide\">\n                    <span className=\"timerContainer\">{timerRef.current}</span>\n                </div>\n            </div>\n            <div className=\"gameBoard\">\n                <div className=\"gameLeftSide\">\n                    <div className=\"tabBar\">\n                        <div className=\"tabBarItem tabBarItem-active\" id=\"questionTab\" onClick={() => updateTabState('question')}>Question</div>\n                        <div className=\"tabBarItem\" id=\"consoleTab\" onClick={() => updateTabState('console')}>Console</div>\n                        <div className=\"tabBarItem\" id=\"chatTab\" onClick={() => updateTabState('chat')}>Chat</div>\n                    </div>\n                    <div className=\"tabBarView\" id=\"question\" style={{display: (activeTab === 'question') ? 'block' : 'none'}}>\n                        <div className=\"questionHeading\">\n                            <h2 className=\"title\">{question.title}</h2>\n                            <p className=\"author\"><a href={question.accountLink} target=\"_blank\">By: {question.madeBy}</a></p>\n                        </div>\n                        <div className=\"questionDescription\">\n                            {question.description}\n                            {/* <div className=\"codeBlock\">\n                                <p>Input: [1, 32, 12, 34, 231, 42]</p>\n                                <p>output: [1, 12, 32, 34, 42, 231]</p>\n                            </div> */}\n                            {\n                                ('examples' in question) ? (\n                                    question.examples.map(val => (\n                                        <div className=\"codeBlock\">\n                                            <p>Input: {val.input}</p>\n                                            <p>Output: {val.output}</p>\n                                        </div>\n                                    ))\n                                ) : null\n                            }\n                        </div>\n                    </div>\n                    <div className=\"tabBarView\" id=\"console\" style={{display: (activeTab === 'console') ? 'block' : 'none'}}>\n                        <h2>Console</h2>\n                    </div>\n                    <div className=\"tabBarView\" id=\"chat\" style={{display: (activeTab === 'chat') ? 'flex' : 'none'}}>\n                        <div className=\"chatContainer\">\n                            <div className=\"messagesContainer\">\n                                {\n                                    messages.map(val => (\n                                        <div className=\"messageContainer\">\n                                            <img src={val.image} alt=\"\" />\n                                            <div>\n                                                <h5 className=\"greyish\">{val.name}</h5>\n                                                <p>{val.message}</p>\n                                            </div>\n                                        </div>\n                                    ))\n                                }\n\n                            </div>\n                            <ButtonedInputBox inputId=\"messageInput\" bgColor=\"var(--main-grey)\" placeholder=\"Put Your Message Here...\" btnValue={<i class=\"fas fa-paper-plane\"></i>} btnFunction='sendMessage' socket={socket} gameCode={state.gameCode}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"gameRightSide\">\n                <AceEditor\n                    mode=\"javascript\"\n                    theme=\"monokai\"\n                    name=\"editor\"\n                    value={question.starterCode}\n                    editorProps={{ $blockScrolling: true }}\n                    focus={true}\n                    enableBasicAutocompletion={true}\n                    enableLiveAutocompletion={true}\n                    enableSnippets={true}\n                    width=\"100%\"\n                    fontSize={16}\n                    onChange={changeHandler}\n                />\n                </div>\n            </div>\n            <div className=\"gameBottomSection\">\n                <div className=\"gameNotificationSection\" id=\"gamePageNotificationContainer\"></div>\n                <div className=\"gameActionBtns\">\n                    <button className=\"flatBtn--clicked\">Btn</button>\n                    <button className=\"flatBtn\" style={{marginLeft: '1em'}} onClick={submitCode}>Submit</button>\n                </div>\n            </div>\n        </div>\n    )\n}","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/ButtonedInputBox/ButtonedInputBox.jsx",[],"/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Login/Login.jsx",["52"],"import './Login.css';\nimport { getAuth, signInWithPopup, GoogleAuthProvider, FacebookAuthProvider, GithubAuthProvider } from 'firebase/auth';\nimport { useContext } from 'react';\nimport { User } from '../../App';\n\nexport default function Login(props) {\n    const {user, setUser} = useContext(User);\n    const socket = props.socket;\n    \n    const googleAuth = () => {\n        const provider = new GoogleAuthProvider();\n        const auth = getAuth();\n        signInWithPopup(auth, provider).then((result) => {\n            const credential = GoogleAuthProvider.credentialFromResult(result);\n            const token = credential.accessToken;\n            const user = result.user;\n            console.log(user);\n            socket.emit('login', {name: user.displayName, email: user.email, photo: user.photoURL});\n            setUser({\n                name: user.displayName,\n                email: user.email,\n                photo: user.photoURL,\n                admin: false,\n            });\n            console.log(token);\n        }).catch((error) => {\n            console.error(`An error has occured, Error Code: ${error.code}, Error Message: ${error.message}, Email of error causer: ${error.email}`);\n        });\n    }\n\n    const facebookAuth = () => {\n        const provider = new FacebookAuthProvider();\n        const auth = getAuth();\n        signInWithPopup(auth, provider).then((result) => {\n            const user = result.user;\n            const credential = FacebookAuthProvider.credentialFromResult(result);\n            const accessToken = credential.accessToken;\n            socket.emit('login', {name: user.displayName, email: user.email, photo: user.photoURL});\n            \n            setUser({\n                name: user.displayName,\n                email: user.email,\n                photo: user.photoURL,\n                admin: false,\n            });\n            console.log(accessToken);\n        })\n    }\n\n    const githubAuth = () => {\n        const provider = new GithubAuthProvider();\n        const auth = getAuth();\n        signInWithPopup(auth, provider).then((result) => {\n            const user = result.user;\n            const credential = GithubAuthProvider.credentialFromResult(result);\n            const token = credential.accessToken;\n            socket.emit('login', {name: user.displayName, email: user.email, photo: user.photoURL});\n\n            setUser({\n                name: user.displayName,\n                email: user.email,\n                photo: user.photoURL,\n                admin: false,\n            });\n            console.log(token);\n        })\n    }\n\n    return (\n        <div className=\"Login\">\n            <div className=\"loginHeaders\">\n                <h1>Welcome to MultiCoder</h1>\n                <p className=\"greyish\">Login and start kicking!</p>\n            </div>\n            <div className=\"loginBtns\">\n                <button onClick={googleAuth} className=\"loginBtn--google\"><i class=\"fab fa-google\"></i>Google</button>\n                <button onClick={facebookAuth} className=\"loginBtn--facebook\"><i class=\"fab fa-facebook\"></i>Facebook</button>\n                <button onClick={githubAuth} className=\"loginBtn--github\"><i class=\"fab fa-github\"></i>Github</button>\n            </div>\n        </div>\n    )\n}","/media/moaad/New Volume/Projects/MultiCoder-2.0/frontend/src/Components/Lobby/Lobby.jsx",["53"],"import { useContext, useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router';\nimport './Lobby.css';\nimport { User } from '../../App';\n\nexport default function Lobby(props) {\n    const { user, setUser } = useContext(User);\n    const socket = props.socket;\n    const { state } = useLocation();\n    const [playersObj, setPlayersObj] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const roomCode = state.gameCode;\n    const navigate = useNavigate();\n\n    const showWarning = (msg) => {\n        const warningContainer = document.getElementById('lobbyWarning');\n        warningContainer.innerText = msg;\n        warningContainer.classList.add('fadeIn');\n        warningContainer.style.display = 'block';\n        setTimeout(() => {\n            warningContainer.classList.remove('fadeIn');\n            setTimeout(() => {\n                warningContainer.classList.add('fadeOut');\n                setTimeout(() => {\n                    warningContainer.style.display = 'none';\n                    warningContainer.classList.remove('fadeOut');\n                    warningContainer.innerHTML = '';\n                }, 400);\n            }, 5000);\n        }, 400);\n    }\n    \n    useEffect(() => {\n        setPlayersObj(state.playersObj);\n        \n        socket.on('joinARoom', data => {\n            if (data[0]) {\n                setPlayersObj(JSON.parse(data[1]));\n                console.log(`join happend, current object: ` + JSON.parse(data[1]));\n            }\n        });\n\n        socket.on('kicked', (data) => {\n                socket.emit('leaveRoom', [data, true]);\n                navigate('/play', {state: { kicked: true }});\n        });\n\n        socket.on('leaveMove', (data) => {\n            //data[0]: userId\n            //data[1]: RoomsObject\n            let obj = JSON.parse(data[1]);\n            if (obj['players'][data[0]]) {\n                showWarning(`${obj['players'][data[0]].name} left the game.`);\n                delete obj['players'][data[0]];\n                setPlayersObj(obj);\n            } else if (obj['spectators'][data[0]]) {\n                showWarning(`${obj['spectators'][data[0]].name} left the game.`);\n                delete obj['spectators'][data[0]];\n                setPlayersObj(obj);\n            } else {\n                showWarning(`${obj['winners'][data[0]].name} left the game.`);\n                delete obj['winners'][data[0]];\n                setPlayersObj(obj);\n            }\n        });\n\n        socket.on('kickMove', (data) => {\n            // data[0]: userId\n            // data[1]: new players object\n            let obj = JSON.parse(data[1]);\n            console.log(obj);\n            showWarning(`${obj['players'][data[0]].name} has been kicked by the room's leader`);\n            delete obj['players'][data[0]];\n            setPlayersObj(obj);\n        });\n\n        socket.on('startFriendsAndFamily', (data) => {\n            navigate('/game', { state: { gameCode: roomCode, question: data } });\n        });\n\n        socket.on('friendsAndFamilyWinnerNotify', (data) => {\n            //data[0]: name\n            //data[1]: time\n            //data[2]: newPlayersObject (string)\n            console.log(`${data[0]} has Won! his timescore is ${data[1]}, and this object came along: ${data[2]}`);\n            showNotificationSection(`<b>${data[0]}</b> has Won! his timescore is ${data[1]}`, '#528a08');\n            setPlayersObj(JSON.parse(data[2]));\n        });\n\n        socket.on('friendsAndFamilyLoserNotify', (data) => {\n            //data: name\n            showNotificationSection(`<b>${data}</b> submitted a broken code, what a loser`, '#9A1C0C');\n        });\n\n        socket.on('friendsAndFamilyGameRestarted', (data) => {\n            //data: playersObject (string)\n            setPlayersObj(JSON.parse(data));\n        });\n\n        socket.on('newAdmin', () => {\n            setUser({\n                name: user.displayName,\n                email: user.email,\n                photo: user.photoURL,\n                admin: true,\n            });\n        });\n\n        setIsLoading(false);\n        \n        return () => {\n            socket.off('joinARoom');\n            socket.off('kicked');\n            socket.off('kickUser');\n            socket.off('startFriendsAndFamily');\n            socket.off('friendsAndFamilyWinnerNotify');\n            socket.off('friendsAndFamilyLoserNotify');\n            socket.off('newAdmin');\n        }\n    }, []);\n\n    const kickUser = userId => {\n        console.log(userId);\n        console.log(`About to send the kick order, current players object: ${JSON.stringify(playersObj)}`);\n        socket.emit('kickUser', [userId, roomCode]);\n    }\n\n    const startGame = () => {\n        socket.emit('startFriendsAndFamily', roomCode);\n    }\n\n    const restartGame = () => {\n        socket.emit('restartFriendsAndFamilyGame', roomCode);\n    }\n\n    const showNotificationSection = (msg, color) => {\n        const notificationSection = document.getElementById('lobbyNotificationContainer');\n        notificationSection.innerHTML = msg;\n        notificationSection.style.backgroundColor = color;\n        notificationSection.classList.add('fadeIn');\n        notificationSection.style.opacity = '1';\n        setTimeout(() => {\n            notificationSection.classList.remove('fadeIn');\n            notificationSection.classList.add('fadeOut');\n            setTimeout(() => {\n                notificationSection.style.opacity = '0';\n                notificationSection.classList.remove('fadeOut');\n            }, 400);\n        }, 8000);\n    }\n\n    const unban = key => {\n        socket.emit('unban', [key, roomCode]);\n        socket.on('unban', data => {\n            //data = new room object\n            setPlayersObj(JSON.parse(data));\n        });\n    }\n\n    const leaveGame = () => {\n        socket.emit('leaveRoom', [roomCode, false]);\n        navigate('/play', {state: { kicked: false }});\n    }\n    \n    console.log(playersObj);\n\n    if (isLoading) {\n        return (\n            <h1>Loading</h1>\n        )\n    }\n    \n    return (\n        <div className=\"lobby\">\n            <h2 className=\"lobbyHeader\">Lobby: {roomCode}  <i class=\"fas fa-circle liveIndicator\" style={{display: (playersObj.closed) ? 'block' : 'none'}}></i></h2>\n            <i className=\"greyish\" style={{display: (playersObj.closed) ? 'block' : 'none'}}>some players have already started the game,<br /> you will join on the next round</i>\n            <div className=\"warning\" id=\"lobbyWarning\"></div>\n            <div className=\"lobbyPlayersContainer\">\n                {\n                    (Object.keys(playersObj['winners']).length > 0) ? \n                    Object.keys(playersObj['winners']).map(key => (\n                        <div className=\"lobbyPlayer\">\n                            <div className=\"lobbyPlayerDescription\">\n                                <img className=\"winnerColor\" src={playersObj['winners'][key].photo} alt=\"\" />\n                                <h4 className=\"winnerColor\">{playersObj['winners'][key].name} {(playersObj['winners'][key].admin) ? (<i class=\"fas fa-crown\"></i>) : null}</h4>\n                            </div>\n                                {\n                                    (user.admin && !playersObj['winners'][key].admin && !playersObj.closed) ? (\n                                        <button onClick={() => kickUser(key)} className=\"kickBtn\"><i class=\"fas fa-door-open\"></i></button>\n                                    ) : null\n                                }\n                                <span className=\"winnerColor\">{playersObj['winners'][key].timeScore}</span>\n                        </div>\n                    )) : null\n                }\n                {\n                    Object.keys(playersObj['players']).map(key => (\n                        <div className=\"lobbyPlayer\">\n                            <div className=\"lobbyPlayerDescription\">\n                                <img src={playersObj['players'][key].photo} alt=\"\" />\n                                <h4>{playersObj['players'][key].name} {(playersObj['players'][key].admin) ? (<i class=\"fas fa-crown\"></i>) : null}</h4>\n                            </div>\n                                {\n                                    (user.admin && !playersObj['players'][key].admin && !playersObj.closed) ? (\n                                        <button onClick={() => kickUser(key)} className=\"kickBtn\"><i class=\"fas fa-door-open\"></i></button>\n                                    ) : null\n                                }\n                        </div>\n                    ))\n                }\n                {\n                    Object.keys(playersObj['spectators']).map(key => (\n                        <div className=\"lobbyPlayer\">\n                            <div className=\"lobbyPlayerDescription\">\n                                <img src={playersObj['spectators'][key].photo} alt=\"\" />\n                                <h4>{playersObj['spectators'][key].name} {(playersObj['spectators'][key].admin) ? (<i class=\"fas fa-crown\"></i>): null}</h4>\n                            </div>\n                            {\n                                (user.admin && !playersObj['spectators'][key].admin && !playersObj.closed) ? (\n                                    <button onClick={() => kickUser(key)} className=\"kickBtn\"><i class=\"fas fa-door-open\"></i></button>\n                                ) : null\n                            }\n                        </div>\n                    ))\n                }\n                {\n                    (user.admin) ? \n                    Object.keys(playersObj['kicked']).map(key => (\n                        <div className=\"lobbyPlayer\" style={{opacity: .7}}>\n                            <div className=\"lobbyPlayerDescription\">\n                                <img src={playersObj['kicked'][key].photo} alt=\"\" />\n                                <h4>{playersObj['kicked'][key].name}</h4>\n                            </div>\n                            {\n                                (user.admin && !playersObj['kicked'][key].admin) ? (\n                                    <button onClick={() => unban(key)} className=\"kickBtn\"><i class=\"fas fa-times\"></i></button>\n                                ) : null\n                            }\n                        </div>\n                    )) : null\n                }\n            </div>\n            <div className=\"gameNotificationSection\" id=\"lobbyNotificationContainer\"></div>\n            {\n                (user.admin && !playersObj.closed) ? (\n                    <button className=\"flatBtn\" onClick={startGame} style={{display: 'block', margin: '1em auto'}}> Start </button>\n                ) : (user.admin && playersObj.closed && Object.keys(playersObj['players']).length === 0) ? (\n                    <button className=\"flatBtn\" onClick={restartGame} style={{display: 'block', margin: '1em auto'}}> Go Again? </button>\n                ) : null\n            }\n            <button className=\"flatBtn\" onClick={leaveGame} style={{display: 'block', margin: '1em auto'}}>Leave game</button>\n        </div>\n    )\n}",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":27,"column":7,"nodeType":"60","messageId":"61","endLine":27,"endColumn":10},{"ruleId":"62","severity":1,"message":"63","line":131,"column":8,"nodeType":"64","endLine":131,"endColumn":10,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":81,"column":8,"nodeType":"64","endLine":81,"endColumn":10,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":106,"column":26,"nodeType":"70","messageId":"71","endLine":106,"endColumn":30},{"ruleId":"72","severity":1,"message":"73","line":107,"column":35,"nodeType":"74","messageId":"71","endLine":107,"endColumn":37},{"ruleId":"75","severity":1,"message":"76","line":160,"column":51,"nodeType":"77","messageId":"78","endLine":160,"endColumn":98,"fix":"79"},{"ruleId":"58","severity":1,"message":"80","line":7,"column":12,"nodeType":"60","messageId":"61","endLine":7,"endColumn":16},{"ruleId":"62","severity":1,"message":"81","line":120,"column":8,"nodeType":"64","endLine":120,"endColumn":10,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'app' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.","ArrayExpression",["85"],"React Hook useEffect has missing dependencies: 'navigate', 'setUser', 'socket', 'state.gameCode', 'state.question', 'user.displayName', 'user.email', and 'user.photoURL'. Either include them or remove the dependency array.",["86"],"no-eval","eval can be harmful.","CallExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"87","text":"88"},"'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate', 'roomCode', 'setUser', 'socket', 'state.playersObj', 'user.displayName', 'user.email', and 'user.photoURL'. Either include them or remove the dependency array.",["89"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},[6126,6126]," rel=\"noreferrer\"",{"desc":"94","fix":"95"},"Update the dependencies array to be: [state]",{"range":"96","text":"97"},"Update the dependencies array to be: [navigate, setUser, socket, state.gameCode, state.question, user.displayName, user.email, user.photoURL]",{"range":"98","text":"99"},"Update the dependencies array to be: [navigate, roomCode, setUser, socket, state.playersObj, user.displayName, user.email, user.photoURL]",{"range":"100","text":"101"},[5046,5048],"[state]",[2786,2788],"[navigate, setUser, socket, state.gameCode, state.question, user.displayName, user.email, user.photoURL]",[4444,4446],"[navigate, roomCode, setUser, socket, state.playersObj, user.displayName, user.email, user.photoURL]"]